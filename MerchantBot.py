"""
–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è –º–µ—Ä—á–∞–Ω—Ç–æ–≤ Konvert2pay
"""
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from config import BOT_TOKEN, LOG_LEVEL, LOG_FORMAT

# –ò–º–ø–æ—Ä—Ç—ã –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
from db_utils import DatabaseManager, UserManager, InfoManager, OrderManager
from keyboard_manager import KeyboardManager
from constants import Messages, Buttons, CallbackData
from states import UserState, StateManager
from message_handlers import MessageHandlers
from callback_handlers import CallbackHandlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format=LOG_FORMAT,
    level=getattr(logging, LOG_LEVEL)
)
logger = logging.getLogger(__name__)

class MerchantBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ä—á–∞–Ω—Ç–∞–º–∏"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        self.db_manager = DatabaseManager()
        self.user_manager = UserManager(self.db_manager)
        self.info_manager = InfoManager(self.db_manager)
        self.order_manager = OrderManager(self.db_manager)
        self.keyboard_manager = KeyboardManager()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.message_handlers = MessageHandlers(self)
        self.callback_handlers = CallbackHandlers(self)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with self.db_manager.get_connection() as conn:
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    is_merchant BOOLEAN DEFAULT FALSE,
                    merchant_settings TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ—Ä—á–∞–Ω—Ç–∞
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS merchant_settings (
                    user_id INTEGER PRIMARY KEY,
                    shop_id TEXT,
                    shop_api_key TEXT,
                    order_id_tag TEXT,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS info_block (
                    id INTEGER PRIMARY KEY,
                    content TEXT
                )
            ''')
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—á–µ—Ç—á–∏–∫–æ–≤ –∑–∞–∫–∞–∑–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS order_counters (
                    order_id_tag TEXT PRIMARY KEY,
                    counter INTEGER DEFAULT 0
                )
            ''')
            
            conn.commit()
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    def is_merchant(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ—Ä—á–∞–Ω—Ç–æ–º"""
        return self.user_manager.is_merchant(user_id)
    
    def is_admin(self, username: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return self.user_manager.is_admin(username)
    
    def add_user(self, user_id: int, username: str, is_merchant: bool = False) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.user_manager.add_user(user_id, username, is_merchant)
    
    def get_all_merchants(self) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –º–µ—Ä—á–∞–Ω—Ç–æ–≤"""
        return self.user_manager.get_all_merchants()
    
    def grant_merchant_access(self, user_id: int, shop_id: str, shop_api_key: str, order_id_tag: str = None) -> bool:
        """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –º–µ—Ä—á–∞–Ω—Ç–∞"""
        return self.user_manager.grant_merchant_access(user_id, shop_id, shop_api_key, order_id_tag)
    
    def revoke_merchant_access(self, user_id: int) -> bool:
        """–û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –º–µ—Ä—á–∞–Ω—Ç–∞"""
        return self.user_manager.revoke_merchant_access(user_id)
    
    def get_merchant_settings(self, user_id: int):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä—á–∞–Ω—Ç–∞"""
        return self.user_manager.get_merchant_settings(user_id)
    
    def get_info_content(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞"""
        return self.info_manager.get_info_content()
    
    def update_info_content(self, content: str) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞"""
        return self.info_manager.update_info_content(content)
    
    def get_next_order_id(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π ID –∑–∞–∫–∞–∑–∞"""
        return self.order_manager.get_next_order_id(user_id)
    
    def delete_user(self, username: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.user_manager.delete_user(username)
    
    def get_all_users(self) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        query = "SELECT user_id, username FROM users"
        return self.db_manager.execute_query(query)

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot_instance = MerchantBot()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    username = user.username
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    bot_instance.add_user(user.id, username)
    
    if bot_instance.is_merchant(user.id):
        # –ú–µ—Ä—á–∞–Ω—Ç
        message = Messages.WELCOME_MERCHANT.format(username=username)
        reply_markup = bot_instance.keyboard_manager.get_merchant_main_menu()
        await update.message.reply_text(message, reply_markup=reply_markup)
    else:
        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        message = Messages.WELCOME_REGULAR.format(username=username)
        await update.message.reply_text(message)

async def infoedit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user = update.effective_user
    username = user.username
    
    if not bot_instance.is_admin(username):
        await update.message.reply_text(Messages.ERROR_NOT_ADMIN)
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    context.user_data['current_state'] = UserState.WAITING_FOR_INFO_EDIT.value
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞:")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    message_text = update.message.text
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if message_text == Buttons.MAIN_MENU:
        StateManager.clear_all_states(context)
        
        if bot_instance.is_merchant(user.id):
            reply_markup = bot_instance.keyboard_manager.get_merchant_main_menu()
            await update.message.reply_text(Messages.WELCOME_MERCHANT.format(username=user.username), reply_markup=reply_markup)
        elif bot_instance.is_admin(user.username):
            reply_markup = bot_instance.keyboard_manager.get_admin_main_menu()
            await update.message.reply_text(Messages.ADMIN_WELCOME, reply_markup=reply_markup)
        else:
            await update.message.reply_text(Messages.WELCOME_REGULAR.format(username=user.username))
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    if await bot_instance.message_handlers.handle_message(update, context):
        return
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    if bot_instance.is_merchant(user.id):
        reply_markup = bot_instance.keyboard_manager.get_merchant_main_menu()
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=reply_markup)
    elif bot_instance.is_admin(user.username):
        reply_markup = bot_instance.keyboard_manager.get_admin_main_menu()
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=reply_markup)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
    await bot_instance.callback_handlers.handle_callback(update, context)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("infoedit", infoedit_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == "__main__":
    main()