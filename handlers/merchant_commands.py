"""
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ—Ä—á–∞–Ω—Ç–æ–≤
"""
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from handlers.base import BaseCommand
from states import UserState


class ProfileCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –º–µ—Ä—á–∞–Ω—Ç–∞"""
    
    def __init__(self, bot_instance):
        super().__init__("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
        self.bot_instance = bot_instance
    
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        username = update.effective_user.username
        user_id = update.effective_user.id
        
        if not self.can_handle(update.message.text):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ—Ä—á–∞–Ω—Ç–æ–º
        if not self.bot_instance.is_merchant(user_id):
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—Ä—á–∞–Ω—Ç–∞
        merchant_data = self.bot_instance.get_merchant_settings(user_id)
        
        if merchant_data:
            shop_id, shop_api_key, order_id_tag = merchant_data[1], merchant_data[2], merchant_data[3]
            message = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n‚Ä¢ Username: @{username}\n‚Ä¢ Shop ID: {shop_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n‚Ä¢ Shop API Key: {shop_api_key or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n‚Ä¢ Order ID Tag: {order_id_tag or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        else:
            message = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n‚Ä¢ Username: @{username}\n\n–î–∞–Ω–Ω—ã–µ –º–µ—Ä—á–∞–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        keyboard = [
            [KeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"), KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(message, reply_markup=reply_markup)
        return True


class InfoCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞"""
    
    def __init__(self, bot_instance):
        super().__init__("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        self.bot_instance = bot_instance
    
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        user_id = update.effective_user.id
        
        if not self.can_handle(update.message.text):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ—Ä—á–∞–Ω—Ç–æ–º
        if not self.bot_instance.is_merchant(user_id):
            return False
        
        info_content = self.bot_instance.get_info_content()
        message = f"üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n{info_content}"
        await update.message.reply_text(message)
        return True


class CreateInvoiceCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞"""
    
    def __init__(self, bot_instance):
        super().__init__("üé∞ –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å")
        self.bot_instance = bot_instance
    
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        user_id = update.effective_user.id
        
        if not self.can_handle(update.message.text):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ—Ä—á–∞–Ω—Ç–æ–º
        if not self.bot_instance.is_merchant(user_id):
            return False
        
        message = "üé∞ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–≤–æ–π—Å–∞"
        # Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞
        inline_keyboard = [
            [InlineKeyboardButton("üí≥ Card", callback_data="invoice_method_card"),
             InlineKeyboardButton("‚ö° OneClick", callback_data="invoice_method_oneclick"),
             InlineKeyboardButton("üè¶ IBAN", callback_data="invoice_method_iban")]
        ]
        inline_markup = InlineKeyboardMarkup(inline_keyboard)
        
        # KeyboardButton –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = [
            [KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
        await update.message.reply_text(message, reply_markup=inline_markup)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º KeyboardButton –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        await update.message.reply_text(".", reply_markup=reply_markup)
        return True


class CreatePayoutCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã"""
    
    def __init__(self, bot_instance):
        super().__init__("üíé –°–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É")
        self.bot_instance = bot_instance
    
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        user_id = update.effective_user.id
        
        if not self.can_handle(update.message.text):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ—Ä—á–∞–Ω—Ç–æ–º
        if not self.bot_instance.is_merchant(user_id):
            return False
        
        message = "üíé –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã"
        # Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞
        inline_keyboard = [
            [InlineKeyboardButton("üí≥ Card", callback_data="payout_method_card"),
             InlineKeyboardButton("üè¶ IBAN", callback_data="payout_method_iban")]
        ]
        inline_markup = InlineKeyboardMarkup(inline_keyboard)
        
        # KeyboardButton –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = [
            [KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
        await update.message.reply_text(message, reply_markup=inline_markup)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º KeyboardButton –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        await update.message.reply_text(".", reply_markup=reply_markup)
        return True


class LogoutCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    
    def __init__(self, bot_instance):
        super().__init__("‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
        self.bot_instance = bot_instance
    
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        username = update.effective_user.username
        user_id = update.effective_user.id
        
        if not self.can_handle(update.message.text):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ—Ä—á–∞–Ω—Ç–æ–º
        if not self.bot_instance.is_merchant(user_id):
            return False
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
        message = f"‚ùå –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –æ—Ç –ë–æ—Ç–∞?\n\n–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π @username –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
        keyboard = [
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="logout_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –£–±–∏—Ä–∞–µ–º –º–µ–Ω—é (ReplyKeyboardRemove)
        remove_keyboard = ReplyKeyboardRemove()
        
        await update.message.reply_text(message, reply_markup=reply_markup)
        context.user_data['current_state'] = UserState.WAITING_FOR_LOGOUT_CONFIRMATION.value
        context.user_data['logout_username'] = username
        return True
