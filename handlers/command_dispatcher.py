"""
–î–∏—Å–ø–µ—Ç—á–µ—Ä –∫–æ–º–∞–Ω–¥ - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
"""
from typing import List
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from handlers.base import BaseHandler, BaseCommand, BaseState
from handlers.admin_commands import (
    ShowUsersCommand, CreateBroadcastCommand, AddUserCommand, 
    DeleteUserCommand, MainMenuCommand
)
from handlers.merchant_commands import (
    ProfileCommand, InfoCommand, CreateInvoiceCommand, 
    CreatePayoutCommand, LogoutCommand
)
from handlers.states import (
    WaitingForBroadcastTextState, WaitingForUsernameState, WaitingForShopIdState,
    WaitingForShopApiKeyState, WaitingForOrderIdTagState, WaitingForDeleteUsernameState,
    WaitingForDeleteShopIdState, WaitingForLogoutConfirmState
)


class CommandDispatcher:
    """–î–∏—Å–ø–µ—Ç—á–µ—Ä –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, bot_instance):
        self.bot_instance = bot_instance
        self.commands: List[BaseCommand] = []
        self.states: List[BaseState] = []
        self._initialize_handlers()
    
    def _initialize_handlers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        
        # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.commands.extend([
            ShowUsersCommand(self.bot_instance),
            CreateBroadcastCommand(self.bot_instance),
            AddUserCommand(self.bot_instance),
            DeleteUserCommand(self.bot_instance),
        ])
        
        # –ö–æ–º–∞–Ω–¥—ã –º–µ—Ä—á–∞–Ω—Ç–∞
        self.commands.extend([
            ProfileCommand(self.bot_instance),
            InfoCommand(self.bot_instance),
            CreateInvoiceCommand(self.bot_instance),
            CreatePayoutCommand(self.bot_instance),
            LogoutCommand(self.bot_instance),
        ])
        
        # –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ)
        self.commands.append(MainMenuCommand(self.bot_instance))
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è
        self.states.extend([
            WaitingForBroadcastTextState(self.bot_instance),
            WaitingForUsernameState(self.bot_instance),
            WaitingForShopIdState(self.bot_instance),
            WaitingForShopApiKeyState(self.bot_instance),
            WaitingForOrderIdTagState(self.bot_instance),
            WaitingForDeleteUsernameState(self.bot_instance),
            WaitingForDeleteShopIdState(self.bot_instance),
            WaitingForLogoutConfirmState(self.bot_instance),
        ])
    
    async def dispatch_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, False –∏–Ω–∞—á–µ
        """
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        for state in self.states:
            if await state.handle(update, context):
                return True
        
        # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        for command in self.commands:
            if await command.handle(update, context):
                return True
        
        return False
    
    def add_command(self, command: BaseCommand):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É"""
        self.commands.append(command)
    
    async def dispatch_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π callback query
        
        Returns:
            bool: True –µ—Å–ª–∏ callback query –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, False –∏–Ω–∞—á–µ
        """
        query = update.callback_query
        await query.answer()
        
        callback_data = query.data
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è order_id_tag
        if callback_data == "skip_order_id_tag":
            username = update.effective_user.username
            
            if not self.bot_instance.is_admin(username):
                return False
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ order_id_tag
            new_username = context.user_data.get('new_username')
            shop_id = context.user_data.get('shop_id')
            shop_api_key = context.user_data.get('shop_api_key')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = self.bot_instance.grant_merchant_access(new_username, shop_id, shop_api_key, None)
            
            if success:
                message = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω\n\n@{new_username} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –ë–æ—Ç–∞."
            else:
                message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{new_username}."
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = [
                [KeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton("‚úâÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await query.message.reply_text("üë®üèª‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
            await query.message.reply_text(message)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data['current_state'] = None
            context.user_data.pop('new_username', None)
            context.user_data.pop('shop_id', None)
            context.user_data.pop('shop_api_key', None)
            return True
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
        elif callback_data == "logout_cancel":
            user_id = update.effective_user.id
            
            if not self.bot_instance.is_merchant(user_id):
                return False
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–µ—Ä—á–∞–Ω—Ç–∞
            keyboard = [
                [KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
                [KeyboardButton("üé∞ –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å"), KeyboardButton("üíé –°–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await query.message.reply_text("üë®üèª‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
            await query.message.reply_text("‚ùå –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data['current_state'] = None
            context.user_data.pop('logout_username', None)
            return True
        
        return False
