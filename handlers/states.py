"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from handlers.base import BaseState


class WaitingForBroadcastTextState(BaseState):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    
    def __init__(self, bot_instance):
        super().__init__('waiting_for_broadcast_text')
        self.bot_instance = bot_instance
    
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        username = update.effective_user.username
        
        if not self.bot_instance.is_admin(username):
            return False
            
        if not self.can_handle(context.user_data):
            return False
        
        broadcast_text = update.message.text.strip()
        context.user_data['broadcast_text'] = broadcast_text
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        users = self.bot_instance.get_all_active_users()
        success_count = 0
        
        for user_id in users:
            try:
                await context.bot.send_message(chat_id=user_id, text=broadcast_text)
                success_count += 1
            except Exception as e:
                print(f"Failed to send message to {user_id}: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [KeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton("‚úâÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("üë®üèª‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
        await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.set_state(context, None)
        context.user_data.pop('broadcast_text', None)
        return True


class WaitingForUsernameState(BaseState):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è username –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, bot_instance):
        super().__init__('waiting_for_username')
        self.bot_instance = bot_instance
    
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        username = update.effective_user.username
        
        if not self.bot_instance.is_admin(username):
            return False
            
        if not self.can_handle(context.user_data):
            return False
        
        # –ü–æ–ª—É—á–∏–ª–∏ username, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º shop_id
        new_username = update.message.text.strip().replace('@', '')
        context.user_data['new_username'] = new_username
        
        message = f"–£–∫–∞–∂–∏—Ç–µ ID –ú–∞–≥–∞–∑–∏–Ω–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new_username} —Å–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω–≤–æ–π—Å—ã –∏ –≤—ã–ø–ª–∞—Ç—ã."
        keyboard = [
            [KeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
            [KeyboardButton("üë®üèª‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(message, reply_markup=reply_markup)
        
        self.set_state(context, 'waiting_for_shop_id')
        return True


class WaitingForShopIdState(BaseState):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è shop_id"""
    
    def __init__(self, bot_instance):
        super().__init__('waiting_for_shop_id')
        self.bot_instance = bot_instance
    
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        username = update.effective_user.username
        
        if not self.bot_instance.is_admin(username):
            return False
            
        if not self.can_handle(context.user_data):
            return False
        
        # –ü–æ–ª—É—á–∏–ª–∏ shop_id, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º shop_api_key
        shop_id = update.message.text.strip()
        context.user_data['shop_id'] = shop_id
        
        keyboard = [
            [KeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
            [KeyboardButton("üë®üèª‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        message = f"‚úÖ Shop ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {shop_id}\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ shop_api_key:"
        await update.message.reply_text(message, reply_markup=reply_markup)
        
        self.set_state(context, 'waiting_for_shop_api_key')
        return True


class WaitingForShopApiKeyState(BaseState):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è shop_api_key"""
    
    def __init__(self, bot_instance):
        super().__init__('waiting_for_shop_api_key')
        self.bot_instance = bot_instance
    
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        username = update.effective_user.username
        
        if not self.bot_instance.is_admin(username):
            return False
            
        if not self.can_handle(context.user_data):
            return False
        
        # –ü–æ–ª—É—á–∏–ª–∏ shop_api_key, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º order_id_tag
        shop_api_key = update.message.text.strip()
        context.user_data['shop_api_key'] = shop_api_key
        
        keyboard = [
            [KeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
            [KeyboardButton("üë®üèª‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        message = f"‚úÖ Shop API Key —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n–£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ —ç—Ç–æ–º—É Telegram-–∞–∫–∫–∞—É–Ω—Ç—É, –∫–∞–∫ ORDER ID TAG –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ –∏–ª–∏ –≤—ã–ø–ª–∞—Ç—ã."
        
        # Inline –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
        inline_keyboard = [
            [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_order_id_tag")]
        ]
        inline_markup = InlineKeyboardMarkup(inline_keyboard)
        
        await update.message.reply_text(message, reply_markup=inline_markup)
        await update.message.reply_text(".", reply_markup=reply_markup)
        
        self.set_state(context, 'waiting_for_order_id_tag')
        return True


class WaitingForOrderIdTagState(BaseState):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è order_id_tag"""
    
    def __init__(self, bot_instance):
        super().__init__('waiting_for_order_id_tag')
        self.bot_instance = bot_instance
    
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        username = update.effective_user.username
        
        if not self.bot_instance.is_admin(username):
            return False
            
        if not self.can_handle(context.user_data):
            return False
        
        # –ü–æ–ª—É—á–∏–ª–∏ order_id_tag, –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        order_id_tag = update.message.text.strip()
        if order_id_tag == '-':
            order_id_tag = None
        
        new_username = context.user_data.get('new_username')
        shop_id = context.user_data.get('shop_id')
        shop_api_key = context.user_data.get('shop_api_key')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = self.bot_instance.grant_merchant_access(new_username, shop_id, shop_api_key, order_id_tag)
        
        if success:
            message = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω\n\n@{new_username} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –ë–æ—Ç–∞."
        else:
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{new_username}."
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [KeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton("‚úâÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("üë®üèª‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
        await update.message.reply_text(message)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.set_state(context, None)
        context.user_data.pop('new_username', None)
        context.user_data.pop('shop_id', None)
        context.user_data.pop('shop_api_key', None)
        return True


class WaitingForDeleteUsernameState(BaseState):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è username –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, bot_instance):
        super().__init__('waiting_for_delete_username')
        self.bot_instance = bot_instance
    
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        username = update.effective_user.username
        
        if not self.bot_instance.is_admin(username):
            return False
            
        if not self.can_handle(context.user_data):
            return False
        
        # –ü–æ–ª—É—á–∏–ª–∏ username –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º shop_id –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        delete_username = update.message.text.strip().replace('@', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = self.bot_instance.get_user_by_username(delete_username)
        if not user_data:
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{delete_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            keyboard = [
                [KeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
                [KeyboardButton("üë®üèª‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(message, reply_markup=reply_markup)
            self.set_state(context, None)
            return True
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        context.user_data['delete_username'] = delete_username
        context.user_data['delete_user_shop_id'] = user_data[5]  # shop_id –∏–∑ –±–∞–∑—ã
        
        message = f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ shop_id, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{delete_username}."
        keyboard = [
            [KeyboardButton("üë®üèª‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(message, reply_markup=reply_markup)
        
        self.set_state(context, 'waiting_for_delete_shop_id')
        return True


class WaitingForDeleteShopIdState(BaseState):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è shop_id –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    
    def __init__(self, bot_instance):
        super().__init__('waiting_for_delete_shop_id')
        self.bot_instance = bot_instance
    
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        username = update.effective_user.username
        
        if not self.bot_instance.is_admin(username):
            return False
            
        if not self.can_handle(context.user_data):
            return False
        
        # –ü–æ–ª—É—á–∏–ª–∏ shop_id –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
        entered_shop_id = update.message.text.strip()
        correct_shop_id = context.user_data.get('delete_user_shop_id')
        delete_username = context.user_data.get('delete_username')
        
        if entered_shop_id != correct_shop_id:
            # –ù–µ–≤–µ—Ä–Ω—ã–π shop_id - –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–¥–∞–ª–æ—Å—å. –£–∫–∞–∑–∞–Ω–Ω—ã–π shop_id –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞—è–≤–ª–µ–Ω–Ω–æ–º—É username."
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = [
                [KeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton("‚úâÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("üë®üèª‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
            await update.message.reply_text(message)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.set_state(context, None)
            context.user_data.pop('delete_username', None)
            context.user_data.pop('delete_user_shop_id', None)
            return True
        
        # –í–µ—Ä–Ω—ã–π shop_id - —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = self.bot_instance.delete_user(delete_username)
        
        if success:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = self.bot_instance.get_all_users()
            if users:
                message = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ë–æ—Ç—É:\n\n"
                for i, user in enumerate(users, 1):
                    user_id, username_db, first_name, last_name, is_merchant, shop_id, shop_api_key, order_id_tag, created_at = user
                    if is_merchant:
                        message += f"{i}) @{username_db}\n"
                        message += f"shop_id: {shop_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                        message += f"shop_api_key: {shop_api_key or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                        if order_id_tag:
                            message += f"order_id_tag: {order_id_tag}\n"
                        message += "\n"
            else:
                message = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ë–æ—Ç—É:\n\n–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            keyboard = [
                [KeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
                [KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(message, reply_markup=reply_markup)
        else:
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{delete_username}."
            keyboard = [
                [KeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton("‚úâÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("üë®üèª‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
            await update.message.reply_text(message)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.set_state(context, None)
        context.user_data.pop('delete_username', None)
        context.user_data.pop('delete_user_shop_id', None)
        return True


class WaitingForLogoutConfirmState(BaseState):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞"""
    
    def __init__(self, bot_instance):
        super().__init__('waiting_for_logout_confirm')
        self.bot_instance = bot_instance
    
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        if not self.can_handle(context.user_data):
            return False
        
        entered_username = update.message.text.strip().replace('@', '')
        expected_username = context.user_data.get('logout_username')
        
        if entered_username == expected_username:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π username - –≤—ã—Ö–æ–¥–∏–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
            user_id = update.effective_user.id
            success = self.bot_instance.revoke_merchant_access(user_id)
            
            if success:
                message = f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n@{expected_username} –±–æ–ª—å—à–µ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –ë–æ—Ç–∞."
            else:
                message = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞."
            
            await update.message.reply_text(message)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.set_state(context, None)
            context.user_data.pop('logout_username', None)
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π username
            message = f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π username. –û–∂–∏–¥–∞–ª—Å—è: @{expected_username}"
            await update.message.reply_text(message)
        
        return True
