"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
"""
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from states import UserState, StateManager
from api_client import Konvert2payAPI
from webhook_sender import WebhookSender
import logging

logger = logging.getLogger(__name__)

class MessageHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    
    def __init__(self, bot_instance):
        self.bot = bot_instance
    
    async def handle_invoice_states(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞"""
        user = update.effective_user
        message_text = update.message.text.strip()
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"DEBUG: handle_invoice_states called with message: '{message_text}'")
        print(f"DEBUG: Current states: {context.user_data}")
        
        if context.user_data.get(UserState.WAITING_FOR_INVOICE_ID.value):
            print("DEBUG: Processing WAITING_FOR_INVOICE_ID")
            return await self._handle_invoice_id_input(update, context, message_text)
        elif context.user_data.get(UserState.WAITING_FOR_CLIENT_ID.value):
            print("DEBUG: Processing WAITING_FOR_CLIENT_ID")
            return await self._handle_client_id_input(update, context, message_text)
        elif context.user_data.get(UserState.WAITING_FOR_AMOUNT.value):
            print("DEBUG: Processing WAITING_FOR_AMOUNT")
            return await self._handle_amount_input(update, context, message_text)
        
        print("DEBUG: No invoice state matched")
        return False
    
    async def handle_payout_states(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã"""
        user = update.effective_user
        message_text = update.message.text.strip()
        
        if context.user_data.get(UserState.WAITING_FOR_PAYOUT_ORDER_ID.value):
            return await self._handle_payout_order_id_input(update, context, message_text)
        elif context.user_data.get(UserState.WAITING_FOR_PAYOUT_CLIENT_ID.value):
            return await self._handle_payout_client_id_input(update, context, message_text)
        elif context.user_data.get(UserState.WAITING_FOR_IBAN_ACCOUNT.value):
            return await self._handle_iban_account_input(update, context, message_text)
        elif context.user_data.get(UserState.WAITING_FOR_IBAN_INN.value):
            return await self._handle_iban_inn_input(update, context, message_text)
        elif context.user_data.get(UserState.WAITING_FOR_SURNAME.value):
            return await self._handle_surname_input(update, context, message_text)
        elif context.user_data.get(UserState.WAITING_FOR_NAME.value):
            return await self._handle_name_input(update, context, message_text)
        elif context.user_data.get(UserState.WAITING_FOR_MIDDLENAME.value):
            return await self._handle_middlename_input(update, context, message_text)
        elif context.user_data.get(UserState.WAITING_FOR_PURPOSE.value):
            return await self._handle_purpose_input(update, context, message_text)
        elif context.user_data.get(UserState.WAITING_FOR_PAYOUT_AMOUNT.value):
            return await self._handle_payout_amount_input(update, context, message_text)
        
        return False
    
    async def handle_admin_states(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∞"""
        user = update.effective_user
        username = user.username
        message_text = update.message.text.strip()
        
        if not self.bot.is_admin(username):
            return False
        
        if context.user_data.get(UserState.WAITING_FOR_USERNAME.value):
            return await self._handle_admin_username_input(update, context, message_text)
        elif context.user_data.get(UserState.WAITING_FOR_SHOP_ID.value):
            return await self._handle_admin_shop_id_input(update, context, message_text)
        elif context.user_data.get(UserState.WAITING_FOR_SHOP_API_KEY.value):
            return await self._handle_admin_shop_api_key_input(update, context, message_text)
        elif context.user_data.get(UserState.WAITING_FOR_ORDER_ID_TAG.value):
            return await self._handle_admin_order_id_tag_input(update, context, message_text)
        elif context.user_data.get(UserState.WAITING_FOR_DELETE_USERNAME.value):
            return await self._handle_admin_delete_username_input(update, context, message_text)
        elif context.user_data.get(UserState.WAITING_FOR_DELETE_SHOP_ID.value):
            return await self._handle_admin_delete_shop_id_input(update, context, message_text)
        elif context.user_data.get(UserState.WAITING_FOR_INFO_EDIT.value):
            return await self._handle_admin_info_edit_input(update, context, message_text)
        elif context.user_data.get(UserState.WAITING_FOR_BROADCAST.value):
            return await self._handle_admin_broadcast_input(update, context, message_text)
        
        return False
    
    async def handle_logout_state(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã—Ö–æ–¥–∞"""
        user = update.effective_user
        username = user.username
        message_text = update.message.text.strip()
        
        if context.user_data.get(UserState.WAITING_FOR_LOGOUT_CONFIRMATION.value):
            if message_text == f"@{username}":
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞
                self.bot.revoke_merchant_access(user.id)
                StateManager.clear_logout_states(context)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –æ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_info = {
                    "user_id": user.id,
                    "username": username,
                    "shop_id": None  # –ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ shop_id –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                }
                await WebhookSender.send_user_action_webhook("logout", user_info)
                
                message = "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –ë–æ—Ç–∞."
                keyboard = [
                    [KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
                    [KeyboardButton("üé∞ –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å"), KeyboardButton("üíé –°–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É")]
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(message, reply_markup=reply_markup)
                return True
            else:
                # –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                message = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π username. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'."
                keyboard = [
                    [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="logout_cancel")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(message, reply_markup=reply_markup)
                return True
        
        return False
    
    # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–Ω–≤–æ–π—Å–∞
    async def _handle_invoice_id_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∏–Ω–≤–æ–π—Å–∞"""
        context.user_data['invoice_order_id'] = message_text
        context.user_data['current_state'] = UserState.WAITING_FOR_CLIENT_ID.value
        context.user_data[UserState.WAITING_FOR_INVOICE_ID.value] = False
        context.user_data[UserState.WAITING_FOR_CLIENT_ID.value] = True
        
        message = f"üé∞ –£–∫–∞–∂–∏—Ç–µ ID –ö–ª–∏–µ–Ω—Ç–∞\n\nORDER ID: {message_text}"
        keyboard = [[KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(message, reply_markup=reply_markup)
        return True
    
    async def _handle_client_id_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∫–ª–∏–µ–Ω—Ç–∞"""
        context.user_data['invoice_client_id'] = message_text
        context.user_data['current_state'] = UserState.WAITING_FOR_AMOUNT.value
        context.user_data[UserState.WAITING_FOR_CLIENT_ID.value] = False
        context.user_data[UserState.WAITING_FOR_AMOUNT.value] = True
        
        invoice_order_id = context.user_data.get('invoice_order_id', '–ù–µ —É–∫–∞–∑–∞–Ω')
        message = f"üé∞ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É\n\nORDER ID: {invoice_order_id}\nID –ö–ª–∏–µ–Ω—Ç–∞: {message_text}"
        keyboard = [[KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(message, reply_markup=reply_markup)
        return True
    
    async def _handle_amount_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
        try:
            amount = float(message_text)
            context.user_data['invoice_amount'] = amount
            context.user_data['current_state'] = None  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ–ª–æ—É
            context.user_data[UserState.WAITING_FOR_AMOUNT.value] = False
            
            invoice_order_id = context.user_data.get('invoice_order_id', '–ù–µ —É–∫–∞–∑–∞–Ω')
            client_id = context.user_data.get('invoice_client_id', '–ù–µ —É–∫–∞–∑–∞–Ω')
            
            message = f"üé∞ –ó–∞—è–≤–∫–∞ –Ω–∞ –∏–Ω–≤–æ–π—Å\n\n‚Ä¢ ID –∏–Ω–≤–æ–π—Å–∞: {invoice_order_id}\n‚Ä¢ ID –ö–ª–∏–µ–Ω—Ç–∞: {client_id}\n‚Ä¢ –°—É–º–º–∞: {amount} UAH"
            
            inline_keyboard = [
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_invoice"),
                 InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_invoice")]
            ]
            inline_markup = InlineKeyboardMarkup(inline_keyboard)
            
            keyboard = [[KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(message, reply_markup=inline_markup)
            await update.message.reply_text("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
            return True
        except ValueError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500.75)")
            return True
    
    # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤—ã–ø–ª–∞—Ç—ã
    async def _handle_payout_order_id_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∑–∞—è–≤–∫–∏"""
        context.user_data['payout_order_id'] = message_text
        context.user_data[UserState.WAITING_FOR_PAYOUT_ORDER_ID.value] = False
        context.user_data[UserState.WAITING_FOR_PAYOUT_CLIENT_ID.value] = True
        
        message = "üíé –£–∫–∞–∂–∏—Ç–µ ID –ö–ª–∏–µ–Ω—Ç–∞"
        keyboard = [[KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(message, reply_markup=reply_markup)
        return True
    
    async def _handle_payout_client_id_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã"""
        context.user_data['payout_client_id'] = message_text
        context.user_data[UserState.WAITING_FOR_PAYOUT_CLIENT_ID.value] = False
        context.user_data[UserState.WAITING_FOR_IBAN_ACCOUNT.value] = True
        
        message = "üíé –£–∫–∞–∂–∏—Ç–µ IBAN-—Å—á–µ—Ç –ö–ª–∏–µ–Ω—Ç–∞"
        keyboard = [[KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(message, reply_markup=reply_markup)
        return True
    
    async def _handle_iban_account_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ IBAN-—Å—á–µ—Ç–∞"""
        context.user_data['payout_iban_account'] = message_text
        context.user_data[UserState.WAITING_FOR_IBAN_ACCOUNT.value] = False
        context.user_data[UserState.WAITING_FOR_IBAN_INN.value] = True
        
        message = "üíé –£–∫–∞–∂–∏—Ç–µ –ò–ù–ù –ö–ª–∏–µ–Ω—Ç–∞"
        keyboard = [[KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(message, reply_markup=reply_markup)
        return True
    
    async def _handle_iban_inn_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ò–ù–ù"""
        context.user_data['payout_iban_inn'] = message_text
        context.user_data[UserState.WAITING_FOR_IBAN_INN.value] = False
        context.user_data[UserState.WAITING_FOR_SURNAME.value] = True
        
        message = "üíé –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ö–ª–∏–µ–Ω—Ç–∞"
        keyboard = [[KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(message, reply_markup=reply_markup)
        return True
    
    async def _handle_surname_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏"""
        context.user_data['payout_surname'] = message_text
        context.user_data[UserState.WAITING_FOR_SURNAME.value] = False
        context.user_data[UserState.WAITING_FOR_NAME.value] = True
        
        message = "üíé –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ö–ª–∏–µ–Ω—Ç–∞"
        keyboard = [[KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(message, reply_markup=reply_markup)
        return True
    
    async def _handle_name_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
        context.user_data['payout_name'] = message_text
        context.user_data[UserState.WAITING_FOR_NAME.value] = False
        context.user_data[UserState.WAITING_FOR_MIDDLENAME.value] = True
        
        message = "üíé –£–∫–∞–∂–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ –ö–ª–∏–µ–Ω—Ç–∞"
        keyboard = [[KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(message, reply_markup=reply_markup)
        return True
    
    async def _handle_middlename_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç—á–µ—Å—Ç–≤–∞"""
        context.user_data['payout_middlename'] = message_text
        context.user_data[UserState.WAITING_FOR_MIDDLENAME.value] = False
        context.user_data[UserState.WAITING_FOR_PURPOSE.value] = True
        
        message = "üíé –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ö–ª–∏–µ–Ω—Ç–∞\n\n–í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
        
        inline_keyboard = [
            [InlineKeyboardButton("–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É", callback_data="purpose_popovnennya"),
             InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –±–æ—Ä–≥—É", callback_data="purpose_povorennya"),
             InlineKeyboardButton("–ü–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤", callback_data="purpose_perekaz")]
        ]
        inline_markup = InlineKeyboardMarkup(inline_keyboard)
        
        keyboard = [[KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(message, reply_markup=inline_markup)
        await update.message.reply_text(".", reply_markup=reply_markup)
        return True
    
    async def _handle_purpose_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
        context.user_data['payout_purpose'] = message_text
        context.user_data[UserState.WAITING_FOR_PURPOSE.value] = False
        context.user_data[UserState.WAITING_FOR_PAYOUT_AMOUNT.value] = True
        
        message = "üíé –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É"
        keyboard = [[KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(message, reply_markup=reply_markup)
        return True
    
    async def _handle_payout_amount_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã"""
        try:
            amount = float(message_text)
            context.user_data['payout_amount'] = amount
            context.user_data[UserState.WAITING_FOR_PAYOUT_AMOUNT.value] = False
            
            payout_order_id = context.user_data.get('payout_order_id', '–ù–µ —É–∫–∞–∑–∞–Ω')
            client_id = context.user_data.get('payout_client_id', '–ù–µ —É–∫–∞–∑–∞–Ω')
            iban_account = context.user_data.get('payout_iban_account', '–ù–µ —É–∫–∞–∑–∞–Ω')
            iban_inn = context.user_data.get('payout_iban_inn', '–ù–µ —É–∫–∞–∑–∞–Ω')
            surname = context.user_data.get('payout_surname', '–ù–µ —É–∫–∞–∑–∞–Ω')
            name = context.user_data.get('payout_name', '–ù–µ —É–∫–∞–∑–∞–Ω')
            middlename = context.user_data.get('payout_middlename', '–ù–µ —É–∫–∞–∑–∞–Ω')
            purpose = context.user_data.get('payout_purpose', '–ù–µ —É–∫–∞–∑–∞–Ω')
            
            message = f"üíé –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É\n\n‚Ä¢ ID –∑–∞—è–≤–∫–∏: {payout_order_id}\n‚Ä¢ ID –ö–ª–∏–µ–Ω—Ç–∞: {client_id}\n‚Ä¢ –ù–æ–º–µ—Ä iBAN-—Å—á–µ—Ç–∞: {iban_account}\n‚Ä¢ –ò–ù–ù: {iban_inn}\n‚Ä¢ –§–ò–û: {surname} {name} {middlename}\n‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: {purpose}\n‚Ä¢ –°—É–º–º–∞: {amount} UAH"
            
            inline_keyboard = [
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_payout"),
                 InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payout")]
            ]
            inline_markup = InlineKeyboardMarkup(inline_keyboard)
            
            keyboard = [[KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(message, reply_markup=inline_markup)
            await update.message.reply_text("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
            return True
        except ValueError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000.35)")
            return True
    
    # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∞
    async def _handle_admin_username_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ username –∞–¥–º–∏–Ω–æ–º"""
        context.user_data['temp_username'] = message_text
        context.user_data[UserState.WAITING_FOR_USERNAME.value] = False
        context.user_data[UserState.WAITING_FOR_SHOP_ID.value] = True
        
        message = f"üë§ –£–∫–∞–∂–∏—Ç–µ shop_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message_text}"
        keyboard = [[KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(message, reply_markup=reply_markup)
        return True
    
    async def _handle_admin_shop_id_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ shop_id –∞–¥–º–∏–Ω–æ–º"""
        context.user_data['temp_shop_id'] = message_text
        context.user_data[UserState.WAITING_FOR_SHOP_ID.value] = False
        context.user_data[UserState.WAITING_FOR_SHOP_API_KEY.value] = True
        
        username = context.user_data.get('temp_username', '–ù–µ —É–∫–∞–∑–∞–Ω')
        message = f"üë§ –£–∫–∞–∂–∏—Ç–µ shop_api_key –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}\n\nShop ID: {message_text}"
        keyboard = [[KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(message, reply_markup=reply_markup)
        return True
    
    async def _handle_admin_shop_api_key_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ shop_api_key –∞–¥–º–∏–Ω–æ–º"""
        context.user_data['temp_shop_api_key'] = message_text
        context.user_data[UserState.WAITING_FOR_SHOP_API_KEY.value] = False
        context.user_data[UserState.WAITING_FOR_ORDER_ID_TAG.value] = True
        
        username = context.user_data.get('temp_username', '–ù–µ —É–∫–∞–∑–∞–Ω')
        shop_id = context.user_data.get('temp_shop_id', '–ù–µ —É–∫–∞–∑–∞–Ω')
        message = f"üë§ –£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ —ç—Ç–æ–º—É Telegram-–∞–∫–∫–∞—É–Ω—Ç—É, –∫–∞–∫ ORDER ID TAG –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ –∏–ª–∏ –≤—ã–ø–ª–∞—Ç—ã.\n\nUsername: @{username}\nShop ID: {shop_id}\nShop API Key: {message_text}"
        
        inline_keyboard = [
            [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_order_id_tag")]
        ]
        inline_markup = InlineKeyboardMarkup(inline_keyboard)
        
        keyboard = [[KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(message, reply_markup=inline_markup)
        await update.message.reply_text(".", reply_markup=reply_markup)
        return True
    
    async def _handle_admin_order_id_tag_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ order_id_tag –∞–¥–º–∏–Ω–æ–º"""
        username = context.user_data.get('temp_username', '–ù–µ —É–∫–∞–∑–∞–Ω')
        shop_id = context.user_data.get('temp_shop_id', '–ù–µ —É–∫–∞–∑–∞–Ω')
        shop_api_key = context.user_data.get('temp_shop_api_key', '–ù–µ —É–∫–∞–∑–∞–Ω')
        order_id_tag = message_text
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = self.bot.add_user(username, shop_id, shop_api_key, order_id_tag)
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_info = {
                "user_id": None,  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Telegram
                "username": username,
                "shop_id": shop_id
            }
            additional_data = {
                "shop_api_key": shop_api_key,
                "order_id_tag": order_id_tag,
                "added_by_admin": True
            }
            await WebhookSender.send_user_action_webhook("added", user_info, additional_data)
            
            message = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\nShop ID: {shop_id}\nShop API Key: {shop_api_key}\nOrder ID Tag: {order_id_tag}"
        else:
            message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        keyboard = [
            [KeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
            [KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(message, reply_markup=reply_markup)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        StateManager.clear_admin_states(context)
        return True
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        message_text = update.message.text
        current_state = context.user_data.get('current_state')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞
        if current_state in [UserState.WAITING_FOR_INVOICE_ID.value, 
                           UserState.WAITING_FOR_CLIENT_ID.value,
                           UserState.WAITING_FOR_AMOUNT.value]:
            return await self.handle_invoice_states(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã
        elif current_state in [UserState.WAITING_FOR_PAYOUT_ORDER_ID.value,
                             UserState.WAITING_FOR_PAYOUT_CLIENT_ID.value,
                             UserState.WAITING_FOR_IBAN_ACCOUNT.value,
                             UserState.WAITING_FOR_IBAN_INN.value,
                             UserState.WAITING_FOR_SURNAME.value,
                             UserState.WAITING_FOR_NAME.value,
                             UserState.WAITING_FOR_MIDDLENAME.value,
                             UserState.WAITING_FOR_PURPOSE.value,
                             UserState.WAITING_FOR_PAYOUT_AMOUNT.value]:
            return await self.handle_payout_states(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∞
        elif current_state in [UserState.WAITING_FOR_ADMIN_USERNAME.value,
                             UserState.WAITING_FOR_ADMIN_SHOP_ID.value,
                             UserState.WAITING_FOR_ADMIN_API_KEY.value,
                             UserState.WAITING_FOR_ADMIN_ORDER_TAG.value,
                             UserState.WAITING_FOR_ADMIN_DELETE_USERNAME.value,
                             UserState.WAITING_FOR_ADMIN_DELETE_SHOP_ID.value,
                             UserState.WAITING_FOR_ADMIN_BROADCAST.value,
                             UserState.WAITING_FOR_INFO_EDIT.value]:
            return await self.handle_admin_states(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
        elif current_state == UserState.WAITING_FOR_LOGOUT_CONFIRMATION.value:
            return await self.handle_logout_state(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ—Ä—á–∞–Ω—Ç–∞
        elif message_text in ["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üé∞ –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å", "üíé –°–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É", "‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"]:
            return await self.handle_merchant_commands(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞
        elif message_text in ["üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "‚úâÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", "üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"]:
            return await self.handle_admin_commands(update, context)
        
        return False
    
    async def handle_merchant_commands(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ—Ä—á–∞–Ω—Ç–∞"""
        from handlers.merchant_commands import ProfileCommand, InfoCommand, CreateInvoiceCommand, CreatePayoutCommand, LogoutCommand
        
        if update.message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
            command = ProfileCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
            command = InfoCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "üé∞ –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å":
            command = CreateInvoiceCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "üíé –°–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É":
            command = CreatePayoutCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞":
            command = LogoutCommand(self.bot)
            return await command.handle(update, context)
        
        return False
    
    async def handle_admin_commands(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞"""
        from handlers.admin_commands import ShowUsersCommand, CreateBroadcastCommand, AddUserCommand, DeleteUserCommand
        
        if update.message.text == "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
            command = ShowUsersCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "‚úâÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
            command = CreateBroadcastCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            command = AddUserCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            command = DeleteUserCommand(self.bot)
            return await command.handle(update, context)
        
        return False
    
    async def _handle_admin_delete_username_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ username –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        context.user_data['delete_username'] = message_text
        context.user_data[UserState.WAITING_FOR_DELETE_USERNAME.value] = False
        context.user_data[UserState.WAITING_FOR_DELETE_SHOP_ID.value] = True
        
        message = f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ shop_id, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message_text}."
        keyboard = [[KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(message, reply_markup=reply_markup)
        return True
    
    async def _handle_admin_delete_shop_id_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ shop_id –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
        username = context.user_data.get('delete_username', '–ù–µ —É–∫–∞–∑–∞–Ω')
        shop_id = message_text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ shop_id —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç username
        user_data = self.bot.get_user_by_username(username)
        if user_data and user_data[2] == shop_id:  # user_data[2] —ç—Ç–æ shop_id
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            user_info = {
                "user_id": user_data[0],
                "username": username,
                "shop_id": shop_id
            }
            additional_data = {
                "shop_api_key": user_data[3],
                "order_id_tag": user_data[4],
                "deleted_by_admin": True
            }
            await WebhookSender.send_user_action_webhook("deleted", user_info, additional_data)
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.bot.delete_user(username)
            
            message = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = self.bot.get_all_users()
            if users:
                user_list = "\n".join([f"{i+1}) @{user[1]} shop_id: {user[2]} shop_api_key: {user[3]}" for i, user in enumerate(users)])
                message += f"\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ë–æ—Ç—É:\n{user_list}"
            else:
                message += "\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ë–æ—Ç—É: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            keyboard = [
                [KeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
                [KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(message, reply_markup=reply_markup)
        else:
            # –ù–µ–≤–µ—Ä–Ω—ã–π shop_id
            message = "‚ö†Ô∏è –û—à–∏–±–∫–∞\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–¥–∞–ª–æ—Å—å. –£–∫–∞–∑–∞–Ω–Ω—ã–π shop_id –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞—è–≤–ª–µ–Ω–Ω–æ–º—É username."
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
            keyboard = [
                [KeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton("‚úâÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(message, reply_markup=reply_markup)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        StateManager.clear_admin_states(context)
        return True
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        message_text = update.message.text
        current_state = context.user_data.get('current_state')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞
        if current_state in [UserState.WAITING_FOR_INVOICE_ID.value, 
                           UserState.WAITING_FOR_CLIENT_ID.value,
                           UserState.WAITING_FOR_AMOUNT.value]:
            return await self.handle_invoice_states(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã
        elif current_state in [UserState.WAITING_FOR_PAYOUT_ORDER_ID.value,
                             UserState.WAITING_FOR_PAYOUT_CLIENT_ID.value,
                             UserState.WAITING_FOR_IBAN_ACCOUNT.value,
                             UserState.WAITING_FOR_IBAN_INN.value,
                             UserState.WAITING_FOR_SURNAME.value,
                             UserState.WAITING_FOR_NAME.value,
                             UserState.WAITING_FOR_MIDDLENAME.value,
                             UserState.WAITING_FOR_PURPOSE.value,
                             UserState.WAITING_FOR_PAYOUT_AMOUNT.value]:
            return await self.handle_payout_states(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∞
        elif current_state in [UserState.WAITING_FOR_ADMIN_USERNAME.value,
                             UserState.WAITING_FOR_ADMIN_SHOP_ID.value,
                             UserState.WAITING_FOR_ADMIN_API_KEY.value,
                             UserState.WAITING_FOR_ADMIN_ORDER_TAG.value,
                             UserState.WAITING_FOR_ADMIN_DELETE_USERNAME.value,
                             UserState.WAITING_FOR_ADMIN_DELETE_SHOP_ID.value,
                             UserState.WAITING_FOR_ADMIN_BROADCAST.value,
                             UserState.WAITING_FOR_INFO_EDIT.value]:
            return await self.handle_admin_states(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
        elif current_state == UserState.WAITING_FOR_LOGOUT_CONFIRMATION.value:
            return await self.handle_logout_state(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ—Ä—á–∞–Ω—Ç–∞
        elif message_text in ["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üé∞ –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å", "üíé –°–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É", "‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"]:
            return await self.handle_merchant_commands(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞
        elif message_text in ["üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "‚úâÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", "üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"]:
            return await self.handle_admin_commands(update, context)
        
        return False
    
    async def handle_merchant_commands(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ—Ä—á–∞–Ω—Ç–∞"""
        from handlers.merchant_commands import ProfileCommand, InfoCommand, CreateInvoiceCommand, CreatePayoutCommand, LogoutCommand
        
        if update.message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
            command = ProfileCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
            command = InfoCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "üé∞ –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å":
            command = CreateInvoiceCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "üíé –°–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É":
            command = CreatePayoutCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞":
            command = LogoutCommand(self.bot)
            return await command.handle(update, context)
        
        return False
    
    async def handle_admin_commands(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞"""
        from handlers.admin_commands import ShowUsersCommand, CreateBroadcastCommand, AddUserCommand, DeleteUserCommand
        
        if update.message.text == "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
            command = ShowUsersCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "‚úâÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
            command = CreateBroadcastCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            command = AddUserCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            command = DeleteUserCommand(self.bot)
            return await command.handle(update, context)
        
        return False
    
    async def _handle_admin_info_edit_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞"""
        self.bot.update_info_content(message_text)
        
        message = f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n–ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n\n{message_text}"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
        keyboard = [
            [KeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton("‚úâÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(message, reply_markup=reply_markup)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        StateManager.clear_admin_states(context)
        return True
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        message_text = update.message.text
        current_state = context.user_data.get('current_state')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞
        if current_state in [UserState.WAITING_FOR_INVOICE_ID.value, 
                           UserState.WAITING_FOR_CLIENT_ID.value,
                           UserState.WAITING_FOR_AMOUNT.value]:
            return await self.handle_invoice_states(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã
        elif current_state in [UserState.WAITING_FOR_PAYOUT_ORDER_ID.value,
                             UserState.WAITING_FOR_PAYOUT_CLIENT_ID.value,
                             UserState.WAITING_FOR_IBAN_ACCOUNT.value,
                             UserState.WAITING_FOR_IBAN_INN.value,
                             UserState.WAITING_FOR_SURNAME.value,
                             UserState.WAITING_FOR_NAME.value,
                             UserState.WAITING_FOR_MIDDLENAME.value,
                             UserState.WAITING_FOR_PURPOSE.value,
                             UserState.WAITING_FOR_PAYOUT_AMOUNT.value]:
            return await self.handle_payout_states(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∞
        elif current_state in [UserState.WAITING_FOR_ADMIN_USERNAME.value,
                             UserState.WAITING_FOR_ADMIN_SHOP_ID.value,
                             UserState.WAITING_FOR_ADMIN_API_KEY.value,
                             UserState.WAITING_FOR_ADMIN_ORDER_TAG.value,
                             UserState.WAITING_FOR_ADMIN_DELETE_USERNAME.value,
                             UserState.WAITING_FOR_ADMIN_DELETE_SHOP_ID.value,
                             UserState.WAITING_FOR_ADMIN_BROADCAST.value,
                             UserState.WAITING_FOR_INFO_EDIT.value]:
            return await self.handle_admin_states(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
        elif current_state == UserState.WAITING_FOR_LOGOUT_CONFIRMATION.value:
            return await self.handle_logout_state(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ—Ä—á–∞–Ω—Ç–∞
        elif message_text in ["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üé∞ –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å", "üíé –°–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É", "‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"]:
            return await self.handle_merchant_commands(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞
        elif message_text in ["üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "‚úâÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", "üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"]:
            return await self.handle_admin_commands(update, context)
        
        return False
    
    async def handle_merchant_commands(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ—Ä—á–∞–Ω—Ç–∞"""
        from handlers.merchant_commands import ProfileCommand, InfoCommand, CreateInvoiceCommand, CreatePayoutCommand, LogoutCommand
        
        if update.message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
            command = ProfileCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
            command = InfoCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "üé∞ –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å":
            command = CreateInvoiceCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "üíé –°–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É":
            command = CreatePayoutCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞":
            command = LogoutCommand(self.bot)
            return await command.handle(update, context)
        
        return False
    
    async def handle_admin_commands(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞"""
        from handlers.admin_commands import ShowUsersCommand, CreateBroadcastCommand, AddUserCommand, DeleteUserCommand
        
        if update.message.text == "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
            command = ShowUsersCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "‚úâÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
            command = CreateBroadcastCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            command = AddUserCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            command = DeleteUserCommand(self.bot)
            return await command.handle(update, context)
        
        return False
    
    async def _handle_admin_broadcast_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        users = self.bot.get_all_users()
        if users:
            for user in users:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await context.bot.send_message(chat_id=user[0], text=message_text)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[1]}: {e}")
            
            message = f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
        else:
            message = "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
        keyboard = [
            [KeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton("‚úâÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(message, reply_markup=reply_markup)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        StateManager.clear_admin_states(context)
        return True
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        message_text = update.message.text
        current_state = context.user_data.get('current_state')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞
        if current_state in [UserState.WAITING_FOR_INVOICE_ID.value, 
                           UserState.WAITING_FOR_CLIENT_ID.value,
                           UserState.WAITING_FOR_AMOUNT.value]:
            return await self.handle_invoice_states(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã
        elif current_state in [UserState.WAITING_FOR_PAYOUT_ORDER_ID.value,
                             UserState.WAITING_FOR_PAYOUT_CLIENT_ID.value,
                             UserState.WAITING_FOR_IBAN_ACCOUNT.value,
                             UserState.WAITING_FOR_IBAN_INN.value,
                             UserState.WAITING_FOR_SURNAME.value,
                             UserState.WAITING_FOR_NAME.value,
                             UserState.WAITING_FOR_MIDDLENAME.value,
                             UserState.WAITING_FOR_PURPOSE.value,
                             UserState.WAITING_FOR_PAYOUT_AMOUNT.value]:
            return await self.handle_payout_states(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∞
        elif current_state in [UserState.WAITING_FOR_ADMIN_USERNAME.value,
                             UserState.WAITING_FOR_ADMIN_SHOP_ID.value,
                             UserState.WAITING_FOR_ADMIN_API_KEY.value,
                             UserState.WAITING_FOR_ADMIN_ORDER_TAG.value,
                             UserState.WAITING_FOR_ADMIN_DELETE_USERNAME.value,
                             UserState.WAITING_FOR_ADMIN_DELETE_SHOP_ID.value,
                             UserState.WAITING_FOR_ADMIN_BROADCAST.value,
                             UserState.WAITING_FOR_INFO_EDIT.value]:
            return await self.handle_admin_states(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
        elif current_state == UserState.WAITING_FOR_LOGOUT_CONFIRMATION.value:
            return await self.handle_logout_state(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ—Ä—á–∞–Ω—Ç–∞
        elif message_text in ["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üé∞ –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å", "üíé –°–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É", "‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"]:
            return await self.handle_merchant_commands(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞
        elif message_text in ["üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "‚úâÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", "üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"]:
            return await self.handle_admin_commands(update, context)
        
        return False
    
    async def handle_merchant_commands(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ—Ä—á–∞–Ω—Ç–∞"""
        from handlers.merchant_commands import ProfileCommand, InfoCommand, CreateInvoiceCommand, CreatePayoutCommand, LogoutCommand
        
        if update.message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
            command = ProfileCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
            command = InfoCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "üé∞ –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å":
            command = CreateInvoiceCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "üíé –°–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É":
            command = CreatePayoutCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞":
            command = LogoutCommand(self.bot)
            return await command.handle(update, context)
        
        return False
    
    async def handle_admin_commands(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞"""
        from handlers.admin_commands import ShowUsersCommand, CreateBroadcastCommand, AddUserCommand, DeleteUserCommand
        
        if update.message.text == "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
            command = ShowUsersCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "‚úâÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
            command = CreateBroadcastCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            command = AddUserCommand(self.bot)
            return await command.handle(update, context)
        elif update.message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            command = DeleteUserCommand(self.bot)
            return await command.handle(update, context)
        
        return False
