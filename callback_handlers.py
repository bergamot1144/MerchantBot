"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
"""
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from states import UserState, StateManager
from api_client import Konvert2payAPI
import logging

logger = logging.getLogger(__name__)

class CallbackHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫"""
    
    def __init__(self, bot_instance):
        self.bot = bot_instance
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        data = query.data
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –∏–Ω–≤–æ–π—Å–∞
        if data in ["invoice_method_card", "invoice_method_oneclick", "invoice_method_iban"]:
            return await self._handle_invoice_method_selection(query, context, data)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        elif data in ["purpose_popovnennya", "purpose_povorennya", "purpose_perekaz"]:
            return await self._handle_purpose_selection(query, context, data)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –∏–Ω–≤–æ–π—Å–∞
        elif data in ["confirm_invoice", "cancel_invoice"]:
            return await self._handle_invoice_confirmation(query, context, data)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –≤—ã–ø–ª–∞—Ç—ã
        elif data in ["confirm_payout", "cancel_payout"]:
            return await self._handle_payout_confirmation(query, context, data)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ order_id_tag
        elif data == "skip_order_id_tag":
            return await self._handle_skip_order_id_tag(query, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –≤—ã—Ö–æ–¥–∞
        elif data == "logout_cancel":
            return await self._handle_logout_cancel(query, context)
        
        return False
    
    async def _handle_invoice_method_selection(self, query, context: ContextTypes.DEFAULT_TYPE, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –∏–Ω–≤–æ–π—Å–∞"""
        user_id = query.from_user.id
        settings = self.bot.get_merchant_settings(user_id)
        
        if not settings:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä—á–∞–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return True
            
        order_id_tag = settings[3]
        
        if order_id_tag:
            # –ï—Å–ª–∏ –µ—Å—Ç—å order_id_tag, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥
            auto_order_id = self.bot.get_next_order_id(user_id)
            context.user_data['invoice_order_id'] = auto_order_id
            context.user_data[UserState.WAITING_FOR_CLIENT_ID.value] = True
            
            message = f"üé∞ –£–∫–∞–∂–∏—Ç–µ ID –ö–ª–∏–µ–Ω—Ç–∞\n\nORDER ID –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {auto_order_id}"
            keyboard = [[KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await query.edit_message_text(message)
            await query.message.reply_text(" ", reply_markup=reply_markup)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç order_id_tag, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –∏–Ω–≤–æ–π—Å–∞
            context.user_data[UserState.WAITING_FOR_INVOICE_ID.value] = True
            
            message = "üé∞ –£–∫–∞–∂–∏—Ç–µ ID –∏–Ω–≤–æ–π—Å–∞"
            keyboard = [[KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await query.edit_message_text(message)
            await query.message.reply_text(" ", reply_markup=reply_markup)
        
        return True
    
    async def _handle_purpose_selection(self, query, context: ContextTypes.DEFAULT_TYPE, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
        purpose_map = {
            "purpose_popovnennya": "–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É",
            "purpose_povorennya": "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –±–æ—Ä–≥—É",
            "purpose_perekaz": "–ü–µ—Ä–µ–∫–∞–∑ –∫–æ—à—Ç—ñ–≤"
        }
        
        context.user_data['payout_purpose'] = purpose_map[data]
        context.user_data[UserState.WAITING_FOR_PURPOSE.value] = False
        context.user_data[UserState.WAITING_FOR_PAYOUT_AMOUNT.value] = True
        
        message = "üíé –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É"
        keyboard = [[KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await query.edit_message_text(message)
        await query.message.reply_text("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
        return True
    
    async def _handle_invoice_confirmation(self, query, context: ContextTypes.DEFAULT_TYPE, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –∏–Ω–≤–æ–π—Å–∞"""
        if data == "confirm_invoice":
            return await self._confirm_invoice(query, context)
        elif data == "cancel_invoice":
            return await self._cancel_invoice(query, context)
        return False
    
    async def _handle_payout_confirmation(self, query, context: ContextTypes.DEFAULT_TYPE, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –≤—ã–ø–ª–∞—Ç—ã"""
        if data == "confirm_payout":
            return await self._confirm_payout(query, context)
        elif data == "cancel_payout":
            return await self._cancel_payout(query, context)
        return False
    
    async def _confirm_invoice(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞"""
        user_id = query.from_user.id
        settings = self.bot.get_merchant_settings(user_id)
        
        if not settings:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä—á–∞–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return True
            
        shop_id = settings[1]
        shop_api_key = settings[2]
        invoice_order_id = context.user_data.get('invoice_order_id')
        client_id = context.user_data.get('invoice_client_id')
        amount = context.user_data.get('invoice_amount')
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è webhook
        user_info = {
            "user_id": user_id,
            "username": query.from_user.username,
            "shop_id": shop_id
        }
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ API
        result = await Konvert2payAPI.create_invoice(shop_id, shop_api_key, invoice_order_id, client_id, amount, user_info)
        
        if result.get('Success'):
            # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞
            data = result.get('Data', {})
            invoice_id = data.get('invoice_id')
            pay_url = data.get('pay_url')
            currency = data.get('currency', 'UAH')
            
            message = f"‚úÖ –£—Å–ø–µ—Ö\n\n–ò–Ω–≤–æ–π—Å –±—ã–ª —Å–æ–∑–¥–∞–Ω.\n\n‚Ä¢ ID –æ—Ä–¥–µ—Ä–∞: {invoice_id}\n‚Ä¢ ID –∏–Ω–≤–æ–π—Å–∞: {invoice_order_id}\n‚Ä¢ ID –ö–ª–∏–µ–Ω—Ç–∞: {client_id}\n‚Ä¢ –°—É–º–º–∞: {amount} {currency}\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–µ –æ–∫–Ω–æ: {pay_url}"
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–µ—Ä—á–∞–Ω—Ç–∞
            keyboard = [
                [KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
                [KeyboardButton("üé∞ –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å"), KeyboardButton("üíé –°–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await query.edit_message_text(message)
            await query.message.reply_text("üë®üèª‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
        else:
            # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞
            error = result.get('Error', {})
            error_code = error.get('Code', 'Unknown')
            error_message = error.get('Message', 'Unknown error')
            
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞\n\n–ò–Ω–≤–æ–π—Å –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n\n–ö–æ–¥ –æ—à–∏–±–∫–∏: {error_code}\n–°—Ç–∞—Ç—É—Å: {error_message}"
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–µ—Ä—á–∞–Ω—Ç–∞
            keyboard = [
                [KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
                [KeyboardButton("üé∞ –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å"), KeyboardButton("üíé –°–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await query.edit_message_text(message)
            await query.message.reply_text("üë®üèª‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        StateManager.clear_invoice_states(context)
        return True
    
    async def _cancel_invoice(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞"""
        message = "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–µ—Ä—á–∞–Ω—Ç–∞
        keyboard = [
            [KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
            [KeyboardButton("üé∞ –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å"), KeyboardButton("üíé –°–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await query.edit_message_text(message)
        await query.message.reply_text("üë®üèª‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        StateManager.clear_invoice_states(context)
        return True
    
    async def _confirm_payout(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã"""
        user_id = query.from_user.id
        settings = self.bot.get_merchant_settings(user_id)
        
        if not settings:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä—á–∞–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return True
            
        shop_id = settings[1]
        shop_api_key = settings[2]
        payout_order_id = context.user_data.get('payout_order_id')
        client_id = context.user_data.get('payout_client_id')
        iban_account = context.user_data.get('payout_iban_account')
        iban_inn = context.user_data.get('payout_iban_inn')
        surname = context.user_data.get('payout_surname')
        name = context.user_data.get('payout_name')
        middlename = context.user_data.get('payout_middlename')
        purpose = context.user_data.get('payout_purpose')
        amount = context.user_data.get('payout_amount')
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è webhook
        user_info = {
            "user_id": user_id,
            "username": query.from_user.username,
            "shop_id": shop_id
        }
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ API
        result = await Konvert2payAPI.create_payout(shop_id, shop_api_key, payout_order_id, client_id, 
                                                   iban_account, iban_inn, surname, name, middlename, 
                                                   purpose, amount, user_info)
        
        if result.get('Success'):
            # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã
            data = result.get('Data', {})
            withdrawal_id = data.get('withdrawal_id')
            currency = data.get('currency', 'UAH')
            
            message = f"‚úÖ –£—Å–ø–µ—Ö\n\n–í—ã–ø–ª–∞—Ç–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞.\n\n‚Ä¢ ID –≤—ã–ø–ª–∞—Ç—ã: {withdrawal_id}\n‚Ä¢ ID –∑–∞—è–≤–∫–∏: {payout_order_id}\n‚Ä¢ ID –ö–ª–∏–µ–Ω—Ç–∞: {client_id}\n‚Ä¢ –ù–æ–º–µ—Ä iBAN-—Å—á–µ—Ç–∞: {iban_account}\n‚Ä¢ –ò–ù–ù: {iban_inn}\n‚Ä¢ –§–ò–û: {surname} {name} {middlename}\n‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: {purpose}\n‚Ä¢ –°—É–º–º–∞: {amount} {currency}"
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–µ—Ä—á–∞–Ω—Ç–∞
            keyboard = [
                [KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
                [KeyboardButton("üé∞ –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å"), KeyboardButton("üíé –°–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await query.edit_message_text(message)
            await query.message.reply_text("üë®üèª‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
        else:
            # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã
            error = result.get('Error', {})
            error_code = error.get('Code', 'Unknown')
            error_message = error.get('Message', 'Unknown error')
            
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞\n\n–í—ã–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n\n–ö–æ–¥ –æ—à–∏–±–∫–∏: {error_code}\n–°—Ç–∞—Ç—É—Å: {error_message}"
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–µ—Ä—á–∞–Ω—Ç–∞
            keyboard = [
                [KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
                [KeyboardButton("üé∞ –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å"), KeyboardButton("üíé –°–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await query.edit_message_text(message)
            await query.message.reply_text("üë®üèª‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        StateManager.clear_payout_states(context)
        return True
    
    async def _cancel_payout(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã"""
        message = "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–µ—Ä—á–∞–Ω—Ç–∞
        keyboard = [
            [KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
            [KeyboardButton("üé∞ –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å"), KeyboardButton("üíé –°–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await query.edit_message_text(message)
        await query.message.reply_text("üë®üèª‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        StateManager.clear_payout_states(context)
        return True
    
    async def _handle_skip_order_id_tag(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ order_id_tag"""
        username = context.user_data.get('temp_username', '–ù–µ —É–∫–∞–∑–∞–Ω')
        shop_id = context.user_data.get('temp_shop_id', '–ù–µ —É–∫–∞–∑–∞–Ω')
        shop_api_key = context.user_data.get('temp_shop_api_key', '–ù–µ —É–∫–∞–∑–∞–Ω')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ order_id_tag
        success = self.bot.add_user(username, shop_id, shop_api_key, None)
        
        if success:
            message = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\nShop ID: {shop_id}\nShop API Key: {shop_api_key}\nOrder ID Tag: –ù–µ —É–∫–∞–∑–∞–Ω"
        else:
            message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        keyboard = [
            [KeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
            [KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await query.edit_message_text(message)
        await query.message.reply_text("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        StateManager.clear_admin_states(context)
        return True
    
    async def _handle_logout_cancel(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã—Ö–æ–¥–∞"""
        message = "‚ùå –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–µ—Ä—á–∞–Ω—Ç–∞
        keyboard = [
            [KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
            [KeyboardButton("üé∞ –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å"), KeyboardButton("üíé –°–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await query.edit_message_text(message)
        await query.message.reply_text("üë®üèª‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        StateManager.clear_logout_states(context)
        return True
